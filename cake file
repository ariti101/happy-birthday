<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>ðŸŽ‚ Blow Out the Candles</title>
  <style>
    body {
      background-color: #1a1a1a;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      flex-direction: column;
      font-family: 'Comic Sans MS', cursive;
      color: white;
      overflow: hidden;
    }
    .cake {
      position: relative;
      width: 200px;
      height: 150px;
      background: #ff8fa3;
      border-radius: 0 0 20px 20px;
      box-shadow: 0 10px #cc6e87;
    }
    .candle {
      position: absolute;
      width: 10px;
      height: 30px;
      background: #fff;
      top: -30px;
      left: 95px;
      border-radius: 2px;
    }
    .flame {
      width: 12px;
      height: 20px;
      background: radial-gradient(ellipse at center, #ffd700 0%, #ff4500 100%);
      border-radius: 50%;
      position: absolute;
      top: -20px;
      left: -1px;
      animation: flicker 0.2s infinite;
    }
    @keyframes flicker {
      0% { transform: scale(1) translateY(0); opacity: 1; }
      50% { transform: scale(1.2) translateY(-2px); opacity: 0.8; }
      100% { transform: scale(1) translateY(0); opacity: 1; }
    }
    .message {
      margin-top: 40px;
      display: none;
      font-size: 1.5em;
      text-align: center;
      animation: fadeIn 2s ease-in forwards;
    }
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
  </style>
</head>
<body>
  <div class="cake">
    <div class="candle">
      <div class="flame" id="flame"></div>
    </div>
  </div>
  <div class="message" id="message">Make a wish âœ¨<br/>Happy Birthday, love!</div>
  <audio id="bgMusic" src="congratulations.mp3" autoplay loop></audio>

  <script>
    const flame = document.getElementById('flame');
    const message = document.getElementById('message');

    // Mic trigger to detect blowing
    navigator.mediaDevices.getUserMedia({ audio: true, video: false })
      .then(stream => {
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        const mic = audioContext.createMediaStreamSource(stream);
        const analyser = audioContext.createAnalyser();
        analyser.fftSize = 256;
        mic.connect(analyser);

        const buffer = new Uint8Array(analyser.frequencyBinCount);

        function detectBlow() {
          analyser.getByteFrequencyData(buffer);
          const volume = buffer.reduce((a, b) => a + b) / buffer.length;
          if (volume > 40) {
            flame.style.display = 'none';
            message.style.display = 'block';
          }
          requestAnimationFrame(detectBlow);
        }

        detectBlow();
      })
      .catch(err => {
        console.error('Mic access denied or error:', err);
      });
  </script>
</body>
</html>